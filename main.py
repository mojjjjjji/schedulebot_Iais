#–û–±—â–∞—è —á–∞—Å—Ç—å
from aiogram                            import types, Dispatcher, Bot               #—Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –±–æ—Ç
from aiogram.utils                      import executor                             #–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram.types                      import KeyboardButton, ReplyKeyboardMarkup  #–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
from aiogram.dispatcher                 import FSMContext                           #–ö–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ handler'e —É–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
from aiogram.dispatcher.filters.state   import State, StatesGroup                   #
from aiogram.contrib.fsm_storage.memory import MemoryStorage                        #–ö–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ 
from functions                          import *                                    #
from aiogram.dispatcher.filters         import Text
from datetime import datetime, date
import asyncio
import os       #–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å os, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—à TOKEN
import re       #–ú–æ–¥—É–ª—å —Ä–µ–≥. –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import pymysql  #–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î

storage = MemoryStorage()
bot = Bot(token = '5605614034:AAHNoNXooC9AN-cXT2auLennD0qlfVFxsKY') #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
dp = Dispatcher(bot, storage=storage)                               #–ü–µ—Ä–µ–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞


#–≠—Ç–∞–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class FSMCreateReminder(StatesGroup):
    description = State()   #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    date = State() #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã
    time = State() #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏


# #–≠—Ç–∞–ø—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class FSMEditReminder(StatesGroup):
    description = State()   #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    date = State() #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã
    time = State() #–≠—Ç–∞–ø —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏



#–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def cancel_handler(message: types.Message, state):
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
    await bot.send_message(chat_id= message.from_user.id, text='–ü—Ä–∏–≤–µ—Ç.üëã \n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º –æ –≤–∞—à–∏—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–ª–ª–µ–≥—Ä–∞–º–º–∞, —á—Ç–æ–±—ã...', reply_markup=keyboard)   



#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state="*", commands='üîô–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='üîô–û—Ç–º–µ–Ω–∞', ignore_case = True), state="*")
async def cancel_handler(message: types.Message, state):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É.')
        return  
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
    await state.finish()



#–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def cancel_handler(message: types.Message, state):
    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
    await bot.send_message(message.from_user.id, 'üìÉ–ù–∞–ø–∏—à–∏—Ç–µ –æ —á–µ–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.', reply_markup=keyboard)
    #–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await FSMCreateReminder.description.set()



#–õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
#–≠—Ç–∞–ø 1, —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=FSMCreateReminder.description)
async def load_description(message: types.Message, state: FSMContext):
    if len(message.text) <= 100:
        await bot.send_message(message.from_user.id, 'üìÖ–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É. \n–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å (–¥–¥.–º–º.–≥–≥–≥–≥).')
        async with state.proxy() as data:
            data['description'] = message.text
        #–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥. —ç—Ç–∞–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await FSMCreateReminder.next()
    else:
        await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')



#–≠—Ç–∞–ø 2, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç—ã
@dp.message_handler(state=FSMCreateReminder.date)
async def buttons(message: types.Message, state: FSMContext):
    if len(message.text) == 10:
        async with state.proxy() as data:
            correctDate = False
            try:
                y = int(message.text.split('.')[2])
                m = int(message.text.split('.')[1])
                d = int(message.text.split('.')[0])
                correct_date = f'{y}-{m}-{d}'
                date(y, m, d)
                nowDate = datetime.now()
                
                if (y == nowDate.year and m == nowDate.month and d >= nowDate.day) or (y > nowDate.year) or  (y == nowDate.year and m > nowDate.month):
                    correctDate = True
                else:
                    correctDate = False
            except:
                correctDate = False
            if correctDate:
                data['date'] = correct_date
                await bot.send_message(message.from_user.id, '‚è±–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è. \n–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å (—á—á:–º–º).')
                await FSMCreateReminder.next()
            else:
                await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥).')
    else:
        await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

     

#–≠—Ç–∞–ø 3, —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(state=FSMCreateReminder.time)
async def buttons(message: types.Message, state: FSMContext):
    if len(message.text) == 5:
        async with state.proxy() as data:
            try:
                hour = message.text.split(':')[0]
                min = message.text.split(':')[1]
                y = int(data['date'].split('-')[0])
                m = int(data['date'].split('-')[1])
                d = int(data['date'].split('-')[2])
                nowDate = datetime.now()
                data['time'] = message.text
                if int(hour) <= 23 and int(min) <= 59:
                    if nowDate.year == y and nowDate.month == m and nowDate.day == d:    
                        if nowDate.hour < int(hour) or (nowDate.hour == int(hour) and nowDate.minute < int(min)):
                            #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
                            connection = pymysql.connect(
                                host='localhost',
                                port=3306,
                                user='root',
                                password='qwert123',
                                database='reminder_bot',
                                cursorclass=pymysql.cursors.DictCursor
                            )
                                #–ó–∞–ø–∏—Å—å –≤ –ë–î
                            with connection.cursor() as cursor:
                                cursor.execute(f"INSERT INTO reminder_bot.info_table VALUES ('{message.from_user.id}', '{data['date']}', '{data['time']}', '{data['description']}', 0)")
                                connection.commit()
                            connection.close()
                            keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
                            await bot.send_message(chat_id= message.from_user.id, text='–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ. \n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=keyboard)
                            #–ó–∞–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            await state.finish()
                        else:
                            await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)')
                    else:
                        #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
                            connection = pymysql.connect(
                                host='localhost',
                                port=3306,
                                user='root',
                                password='qwert123',
                                database='reminder_bot',
                                cursorclass=pymysql.cursors.DictCursor
                            )
                                #–ó–∞–ø–∏—Å—å –≤ –ë–î
                            with connection.cursor() as cursor:
                                cursor.execute(f"INSERT INTO reminder_bot.info_table VALUES ('{message.from_user.id}', '{data['date']}', '{data['time']}', '{data['description']}', 0)")
                                connection.commit()
                            connection.close()
                            keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
                            await bot.send_message(chat_id= message.from_user.id, text='–í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ. \n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=keyboard)
                            #–ó–∞–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            await state.finish()
                else:
                    await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)')
            except:
                await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)')
    else:
        await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Å–∏–º–≤–æ–ª–æ–≤.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')



#–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message_handler(text='–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
async def cancel_handler(message: types.Message, state):
    #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = pymysql.connect(
        host='localhost',
        port=3306,
        user='root',
        password='qwert123',
        database='reminder_bot',
        cursorclass=pymysql.cursors.DictCursor
    )    
    with connection.cursor() as cursor:
        cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{message.from_user.id}' ORDER BY `date` ASC, `time` ASC")
        bd = cursor.fetchall()
        if not bd: #bd is None
            await bot.send_message(chat_id= message.from_user.id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
        else:
            ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
            id_reminder=[]
            for i in range(len(bd)):
                id_reminder.append(bd[i]['id_reminder'])
                ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
            ansMsg += '\n'
            ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
            async with state.proxy() as data:
                data['allRecord'] = len(bd)
            #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            form = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
            await bot.send_message(message.from_user.id, ansMsg, reply_markup=form)    
    connection.close()
         


#–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç handler
@dp.callback_query_handler()
async def buttons(call: types.CallbackQuery, state: FSMContext):
    #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –º—ã –Ω–∞–∂–∞–ª–∏
    #–ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∏–π 
    if call.data.split('_')[1] == 'number':
        #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='qwert123',
            database='reminder_bot',
            cursorclass=pymysql.cursors.DictCursor
        )    
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE  `id_reminder` = {call.data.split('_')[0]}")
            bd = cursor.fetchall()
            async with state.proxy() as data:
                data['id_reminder'] = call.data.split('_')[0]
                data['oldDescription'] = bd[0]['description']
                data['oldDate'] = bd[0]['date']
                data['oldTime'] = bd[0]['time']
                data['message_id'] = call.message.message_id
            ansMsg = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ                                               \n\nüìÉ–û–ø–∏—Å–∞–Ω–∏–µ: ' + bd[0]['description'] + '\n\nüìÖ–î–∞—Ç–∞: ' + str(bd[0]['date']) + '\n\n‚è±–í—Ä–µ–º—è: ' + bd[0]['time'] + '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await bot.edit_message_text(chat_id=call.from_user.id,message_id=call.message.message_id, text=ansMsg)
        connection.close()
        inlkb = inline_keyboard_for_delete('number', ' ', call.data.split('_')[0])
        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
        await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)   
    #–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elif call.data.split('_')[1] == 'edit':
        inlkb = inline_keyboard_for_delete('edit', ' ', call.data.split('_')[0])
        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
        await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    #–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    elif call.data.split('_')[1] == 'delete':
        #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='qwert123',
            database='reminder_bot',
            cursorclass=pymysql.cursors.DictCursor
        )    
        with connection.cursor() as cursor:
            #–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ  
            cursor.execute(f"DELETE FROM reminder_bot.info_table WHERE  `id_reminder` = {call.data.split('_')[0]}")
            #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
            connection.commit()
            keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
            # await bot.send_message(chat_id= message.from_user.id, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', reply_markup=keyboard)
        connection.close()
        inlkb = inline_keyboard_for_delete('delete')
        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await bot.edit_message_text(chat_id=call.from_user.id,message_id=call.message.message_id, text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.')
        #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
        await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)
    elif call.data.split('_')[1] == 'editDescription':
        keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
        await bot.send_message(call.from_user.id, 'üìÉ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.', reply_markup=keyboard)
        await FSMEditReminder.description.set()
    elif call.data.split('_')[1] == 'editDate':
        keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
        await bot.send_message(call.from_user.id, 'üìÖ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥).', reply_markup=keyboard)
        await FSMEditReminder.date.set()
    elif call.data.split('_')[1] == 'editTime':
        keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('üîô–û—Ç–º–µ–Ω–∞'))
        await bot.send_message(call.from_user.id, '‚è±–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º).', reply_markup=keyboard)
        await FSMEditReminder.time.set()
    #–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    elif call.data.split('_')[1] == 'back':
            #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection = pymysql.connect(
                host='localhost',
                port=3306,
                user='root',
                password='qwert123',
                database='reminder_bot',
                cursorclass=pymysql.cursors.DictCursor
            )    
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{call.from_user.id}' ORDER BY `date` ASC, `time` ASC")
                bd = cursor.fetchall()
                if not bd: #bd is None
                    await bot.edit_message_text(chat_id=call.from_user.id,message_id=call.message.message_id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
                else:
                    ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
                    id_reminder=[]
                    for i in range(len(bd)):
                        id_reminder.append(bd[i]['id_reminder'])
                        ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
                    ansMsg += '\n'
                    ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
                    #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    inlkb = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await bot.edit_message_text(chat_id=call.from_user.id,message_id=call.message.message_id, text=ansMsg)
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                    await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=inlkb)    
            connection.close()



#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=FSMEditReminder.description)
async def load_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) <= 100 and (data['oldDescription'] != message.text):
            data['newDescription'] = message.text
            connection = pymysql.connect(
                host='localhost',
                port=3306,
                user='root',
                password='qwert123',
                database='reminder_bot',
                cursorclass=pymysql.cursors.DictCursor
            )
            #–ó–∞–ø–∏—Å—å –≤ –ë–î
            with connection.cursor() as cursor:
                cursor.execute(f"UPDATE reminder_bot.info_table SET `description` = '{data['newDescription']}' WHERE `id_reminder` = {data['id_reminder']}")
                connection.commit()
                inlkb = inline_keyboard_for_delete('editDescription')

                cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{message.from_user.id}' ORDER BY `date` ASC, `time` ASC")
                bd = cursor.fetchall()
                if not bd: #bd is None
                    await bot.edit_message_text(chat_id=message.from_user.id,message_id=message.message_id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
                else:
                    ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
                    id_reminder=[]
                    for i in range(len(bd)):
                        id_reminder.append(bd[i]['id_reminder'])
                        ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
                    ansMsg += '\n'
                    ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
                    #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    inlkb = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await bot.edit_message_text(chat_id=message.from_user.id,message_id=data['message_id'], text=ansMsg)
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                    await bot.edit_message_reply_markup(message.from_user.id, data['message_id'], reply_markup=inlkb)
                await state.finish()
            connection.close()
            keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
            await bot.send_message(chat_id= message.from_user.id, text='–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        else:
            await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    


#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
@dp.message_handler(state=FSMEditReminder.date)
async def buttons(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) == 10 and (data['oldDate'] != message.text):
                correctDate = False
                try:
                    y = int(message.text.split('.')[2])
                    m = int(message.text.split('.')[1])
                    d = int(message.text.split('.')[0])
                    correct_date = f'{y}-{m}-{d}'
                    date(y, m, d)
                    nowDate = datetime.now()
                    
                    if (y == nowDate.year and m == nowDate.month and d >= nowDate.day) or (y > nowDate.year) or  (y == nowDate.year and m > nowDate.month):
                        correctDate = True
                    else:
                        correctDate = False
                except:
                    correctDate = False
                if correctDate:
                    data['newDate'] = correct_date
                    connection = pymysql.connect(
                        host='localhost',
                        port=3306,
                        user='root',
                        password='qwert123',
                        database='reminder_bot',
                        cursorclass=pymysql.cursors.DictCursor
                    )
                    #–ó–∞–ø–∏—Å—å –≤ –ë–î
                    with connection.cursor() as cursor:
                        cursor.execute(f"UPDATE reminder_bot.info_table SET `date` = '{data['newDate']}' WHERE `id_reminder` = {data['id_reminder']}")
                        connection.commit()
                        inlkb = inline_keyboard_for_delete('editDate', ' ', data['id_reminder'])
                        cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{message.from_user.id}' ORDER BY `date` ASC, `time` ASC")
                        bd = cursor.fetchall()
                        if not bd: #bd is None
                            await bot.edit_message_text(chat_id=message.from_user.id,message_id=message.message_id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
                        else:
                            ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
                            id_reminder=[]
                            for i in range(len(bd)):
                                id_reminder.append(bd[i]['id_reminder'])
                                ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
                            ansMsg += '\n'
                            ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
                            #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            inlkb = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
                    connection.close()
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    await bot.edit_message_text(chat_id=message.from_user.id,message_id=data['message_id'], text=ansMsg)
                    #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                    await bot.edit_message_reply_markup(message.from_user.id, data['message_id'], reply_markup=inlkb)
                    await state.finish()
                    keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
                    await bot.send_message(chat_id= message.from_user.id, text='–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)
                else:
                    await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥).–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π.‚ùó')
        else:
            await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π.‚ùó')



#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(state=FSMEditReminder.time)
async def buttons(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) == 5 and (data['oldTime'] != message.text):
                try:
                    hour = message.text.split(':')[0]
                    min = message.text.split(':')[1]
                    y = int(data['date'].split('.')[2])
                    m = int(data['date'].split('.')[1])
                    d = int(data['date'].split('.')[0])
                    nowDate = datetime.now()
                    data['newTime'] = message.text
                    if int(hour) <= 23 and int(min) <= 59:
                        if nowDate.year == y and nowDate.month == m and nowDate.day == d:    
                            if nowDate.hour < int(hour) or (nowDate.hour == int(hour) and nowDate.minute < int(min)):
                                connection = pymysql.connect(
                                    host='localhost',
                                    port=3306,
                                    user='root',
                                    password='qwert123',
                                    database='reminder_bot',
                                    cursorclass=pymysql.cursors.DictCursor
                                )
                                #–ó–∞–ø–∏—Å—å –≤ –ë–î
                                with connection.cursor() as cursor:
                                    cursor.execute(f"UPDATE reminder_bot.info_table SET `time` = '{data['newTime']}' WHERE `id_reminder` = {data['id_reminder']}")
                                    connection.commit()
                                    inlkb = inline_keyboard_for_delete('editTime', ' ', data['id_reminder'])
                                    cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{message.from_user.id}' ORDER BY `date` ASC, `time` ASC")
                                    bd = cursor.fetchall()
                                    if not bd: #bd is None
                                        await bot.edit_message_text(chat_id=message.from_user.id,message_id=message.message_id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
                                    else:
                                        ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
                                        id_reminder=[]
                                        for i in range(len(bd)):
                                            id_reminder.append(bd[i]['id_reminder'])
                                            ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
                                        ansMsg += '\n'
                                        ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
                                        #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        inlkb = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
                                connection.close()
                                #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                await bot.edit_message_text(chat_id=message.from_user.id,message_id=data['message_id'], text=ansMsg)
                                #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                                await bot.edit_message_reply_markup(message.from_user.id, data['message_id'], reply_markup=inlkb)
                                #–ó–∞–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                await state.finish()
                            else:
                                await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)')
                        else:
                            connection = pymysql.connect(
                                host='localhost',
                                port=3306,
                                user='root',
                                password='qwert123',
                                database='reminder_bot',
                                cursorclass=pymysql.cursors.DictCursor
                            )
                            #–ó–∞–ø–∏—Å—å –≤ –ë–î
                            with connection.cursor() as cursor:
                                cursor.execute(f"UPDATE reminder_bot.info_table SET `time` = '{data['newTime']}' WHERE `id_reminder` = {data['id_reminder']}")
                                connection.commit()
                                inlkb = inline_keyboard_for_delete('editTime', ' ', data['id_reminder'])
                                cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `user_id` = '{message.from_user.id}' ORDER BY `date` ASC, `time` ASC")
                                bd = cursor.fetchall()
                                if not bd: #bd is None
                                    await bot.edit_message_text(chat_id=message.from_user.id,message_id=message.message_id, text='üòê–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
                                else:
                                    ansMsg = 'üìÑ–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n'
                                    id_reminder=[]
                                    for i in range(len(bd)):
                                        id_reminder.append(bd[i]['id_reminder'])
                                        ansMsg += str(i+1) + '. ' + bd[i]['description'] + ' (' + str(bd[i]['date']) + ' ' +  ' –≤ ' + bd[i]['time'] + ')' + '\n'
                                    ansMsg += '\n'
                                    ansMsg += '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:üëá'
                                    #–í—ã–∑–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    inlkb = inline_keyboard_for_delete('start', len(bd), ' ', id_reminder)
                            connection.close()
                            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            await bot.edit_message_text(chat_id=message.from_user.id,message_id=data['message_id'], text=ansMsg)
                            #–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, Id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
                            await bot.edit_message_reply_markup(message.from_user.id, data['message_id'], reply_markup=inlkb)
                            #–ó–∞–∫—Ä—ã—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            await state.finish()
                        keyboard = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')).add(KeyboardButton('–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
                        await bot.send_message(chat_id= message.from_user.id, text='–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
                    else:
                        await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)\n–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.‚ùó')
                except:
                    await bot.send_message(chat_id= message.from_user.id, text='üòê–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. \n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)\n–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.‚ùó')
        else:
            await bot.send_message(chat_id= message.from_user.id, text='üòê–†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Å–∏–º–≤–æ–ª–æ–≤.\n–§–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–¢–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º.‚ùó')



#–í—ã–≤–æ–¥ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler()
async def cancel_handler(message: types.Message, state):
    await message.answer('ü•±–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É.')



async def checker_reminer():
    while True:
        #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='qwert123',
            database='reminder_bot',
            cursorclass=pymysql.cursors.DictCursor
        )    
        with connection.cursor() as cursor:
            #–î–∞—Ç–∞
            date_today = str(datetime.now().date()).split('-')[-1] + '.' + str(datetime.now().date()).split('-')[1] + '.' + str(datetime.now().date()).split('-')[0]
            dateToday = f'{date_today.split(".")[2]}-{date_today.split(".")[1]}-{date_today.split(".")[0]}'
            #–í—Ä–µ–º—è
            hour = str(datetime.now().hour)
            if len(hour) == 1:
                hour = '0' + hour
            minute = str(datetime.now().minute)
            if len(minute) == 1:
                minute = '0' + minute
            time_now = hour + ':' + minute

            cursor.execute(f"SELECT * FROM reminder_bot.info_table WHERE `date` <= '{dateToday}' AND `time` <= '{time_now}'") 
            bd = cursor.fetchall()
            if len(bd):
                for i in range(len(bd)):
                    await bot.send_message(bd[i]['user_id'], f"üì£–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n{bd[i]['description']}")
                    cursor.execute(f"DELETE FROM reminder_bot.info_table WHERE  `id_reminder` = {bd[i]['id_reminder']}")
                    connection.commit() 
            
        connection.close()
        #–¢–∞–π–º–µ—Ä 
        await asyncio.sleep(20)

 
if __name__ == '__main__':

    #–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö. —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    asyncio.get_event_loop().create_task(checker_reminer())
    
    #–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates = True)